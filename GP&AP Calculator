import tkinter as tk
import googletrans
import textblob
from tkinter import ttk, messagebox
# Setting up tkinter to be used as a GUI. Root is the name of the parent where everything will go to.
root = tk.Tk()


#Variables

    #Canvas and Background Varaibles 
geo = "500x300" 
canvaswidth = 500
canvasheight = 300
canvascolor ="#f9f9f9" #light colour used for canvaas

    #Label
startnum = "Starting Number"





    #Label settings
labelback = "#333333" #color for Label background
labeltextcol = "White" #text color used for labels
labelfont = "Arial" #font for label


    #Starting number settings for AP and GP
startnumsize = 14
startnumx = 20
startnumy = 20
startnumtx = 180
startnumty = 20

    #Number of terms settings for AP and GP
numOftermsize = 14
numOFtermx = 20
numOFtermy = 70
numofsumtx = 180
numofsumty = 70

    #Progression number settings for AP and GP
progressionnumsize = 14
progressionnumx = 20
progressionnumy = 120
progressionnumtx=180
progressionnumty =120

    #Language combo box
boxwid = 50
boxx=10 
boxy=160
transx=350  #for translation buttons
transy=140 




    #AP radio button settings
APy = 180
APx= 10
APsize = 14

    #GP radio button settings
GPy = 180
GPx = 240
GPsize = 14

    #output
outx = 10
outy = 210
outwid = 380
outhei = 80





#Fucntions

def translate():
    global startnum
    try:
        for key, value in languages.items():
            if value == Languageset.get():
                to_language_key = key

        # Convert the label text to textblob
        words = textblob.TextBlob(startnum)

        # Translation
        translated_words = words.translate(to=to_language_key)

        # Update the label text with the translated text
        Startingnum.config(text=translated_words)

    except Exception as e:
        messagebox.showerror("translate", e)
   

def clear():
    pass

def Arithmetic():
    final = 0
    ans.config(state=tk.NORMAL)  # Resets the state of text widget
    ans.delete(1.0, tk.END)  # Clear the previous output
    tempnum = 1
    list = []
    first = int(StartingnumTxt.get())
    prog = int(Progressionnumtxt.get())
    while tempnum <= int(NumoftermsTxt.get()):
        final = first + (tempnum - 1)*prog
        tempnum += 1
        list.append(str(final))
    ans.insert(tk.END, " ".join(list)) #Adds the number to the end
    ans.config(state=tk.DISABLED)  # Make the Text widget read-only


def Geometric():
    final = 0
    ans.config(state=tk.NORMAL)  # Resets the state of text widget
    ans.delete(1.0, tk.END)  # Clear the previous output
    tempnum = 1
    list = []
    first = int(StartingnumTxt.get())
    prog = int(Progressionnumtxt.get())
    while tempnum <= int(NumoftermsTxt.get()):
        final = first *(prog**(tempnum-1))
        tempnum += 1
        list.append(str(final))
    ans.insert(tk.END, " ".join(list)) #adds the number to the end
    ans.config(state=tk.DISABLED)  # Make the Text widget read-only



def destroy():
    root.destroy()


def calculator():
    root.title("AP and GP calculator")
    root.geometry(geo)

    global languages
    languages = googletrans.LANGUAGES
    language_list =list(languages.values())





    global ans
    #Setting up the frame
    frame = tk.Frame(root, bg=canvascolor) #was going to use canvas but frame seemed better
    frame.pack(fill=tk.BOTH, expand=True) #fills horizontal and vertical and also expands it

    #Menu
    menubar = tk.Menu(root)
    root.config(menu=menubar)

        #Adding a file button
    file_menu = tk.Menu(menubar, tearoff=0)
    menubar.add_cascade(label='File', menu=file_menu)

    file_menu.add_command(label='Exit', command=destroy)
    
    
    #Labels
        #Starting number
    global Startingnum
    Startingnum = tk.Label(frame, text=(startnum), font=(labelfont, startnumsize), bg=labelback, fg=labeltextcol)
    Startingnum.place(x=startnumx, y=startnumy)

        #Number of Terms

    Numofterms = tk.Label(frame, text=("Number of Terms"), font=(labelfont, numOftermsize), bg=labelback, fg=labeltextcol)
    Numofterms.place(x=numOFtermx, y=numOFtermy)
    
        #Progression Number
    Progressionnum =tk.Label(frame, text=("Increment"), font=(labelfont, progressionnumsize), bg=labelback, fg=labeltextcol)
    Progressionnum.place(x=progressionnumx, y=progressionnumy)

    #TextBOX

    global StartingnumTxt
    StartingnumTxt = tk.Entry(frame, font=(labelfont, startnumsize), bg=labeltextcol)
    StartingnumTxt.place(x=startnumtx, y=startnumty, width=200)

    global NumoftermsTxt
    NumoftermsTxt = tk.Entry(frame, font=(labelfont, numOftermsize), bg=labeltextcol)
    NumoftermsTxt.place(x=numofsumtx, y=numofsumty, width=300)

    global Progressionnumtxt
    Progressionnumtxt = tk.Entry(frame, font=(labelfont, progressionnumsize), bg=labeltextcol)
    Progressionnumtxt.place(x=progressionnumtx, y=progressionnumty, width=200)


    #Radiobuttons
    
    AP = tk.Radiobutton(frame, text="Arithmetic Progression", command=Arithmetic, value=1, font=(labelfont, APsize), bg=canvascolor)
    AP.place(x=APx, y=APy)
    GP = tk.Radiobutton(frame, text="Geometric Progression", command=Geometric, value=2, font=(labelfont, GPsize), bg=canvascolor)
    GP.place(x=GPx, y=GPy)
    trans = tk.Radiobutton(frame, text="Translate", command=translate, value=3, font=(labelfont, 15), bg=canvascolor)
    trans.place(x=transx,y=transy)

    #Combo Box
    global Languageset
    Languageset = ttk.Combobox(frame, width=boxwid, value=language_list)
    Languageset.current(21)
    Languageset.place(x=boxx,y=boxy)


    #output 

        #Frame for the output
    output = tk.Frame(frame, bg=canvascolor)
    output.place(x=outx, y=outy, width=outwid, height=outhei)
   
        #Answer label placed in the output frame
    global ans
    ans = tk.Text(output, font=(labelfont, 15), wrap=tk.NONE)#wrap basically choses what to do when the text goes over the box, in this case it is set to none as we will be using a scroll bar.
    ans.pack(side=tk.LEFT, fill=tk.BOTH, expand=True) #side command moves it all the way to the left of the output frame, fill makes sure that both horizontal and vertical axises are occupied and expand makes it useable when expanded

        #Scroll bar used in the answer
    scroll = tk.Scrollbar(output, command=ans.yview)#the scrollbar is set so that it will be vertical
    scroll.pack(side=tk.RIGHT, fill=tk.Y)#goes to the right side of the frame and fills the y axis
 
    ans.config(yscrollcommand=scroll.set, wrap=tk.WORD) #sets up the scrollbar and wraps the text with a word boundary
    
    root.mainloop()

    







if __name__ == "__main__":
    # Create a StringVar for the label text
    startnum = tk.StringVar()
    startnum.set("Starting Number")

    # Call your calculator function
    calculator()





