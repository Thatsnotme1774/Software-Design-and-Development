import tkinter as tk
from tkinter import*
import googletrans
from textblob import*
from tkinter import ttk, messagebox
# Setting up tkinter to be used as a GUI. Root is the name of the parent where everything will go to.
root = tk.Tk()

#language list and grabbing langauges

global language_list
languages= googletrans.LANGUAGES
language_list = list(languages.values())


#Variables

    #Canvas and Background Varaibles 
geo = "500x300" 
canvaswidth = 500
canvasheight = 300
canvascolor ="#f9f9f9" #light colour used for canvaas

    #Label
global startnum, prognum, termnum, APnum, GPnum, transmsg, errormsg #making them accessible globally (will be useful for translation)
startnum = "Starting Number"
prognum = "Increment"
termnum = "Number of Terms"
APnum = "Arithmetic Progression"
GPnum = "Geometric Progression"
transmsg = "Translate"
Errormsg =  "ERROR! TYPE INTEGERS IN ALL BOXES"


    #Label settings
labelback = "#333333" #color for Label background
labeltextcol = "White" #text color used for labels
labelfont = "Arial" #font for label


    #Starting number settings for AP and GP
startnumsize = 14
startnumx = 20
startnumy = 20
startnumtx = 180
startnumty = 20

    #Number of terms settings for AP and GP
numOftermsize = 14
numOFtermx = 20
numOFtermy = 70
numofsumtx = 180
numofsumty = 70

    #Progression number settings for AP and GP
progressionnumsize = 14
progressionnumx = 20
progressionnumy = 120
progressionnumtx=180
progressionnumty =120

    #Language combo box
boxwid = 50
boxx=10 
boxy=160
transx=350  #for translation buttons
transy=140 




    #AP radio button settings
APy = 180
APx= 10
APsize = 14

    #GP radio button settings
GPy = 180
GPx = 240
GPsize = 14

    #output
outx = 10
outy = 210
outwid = 380
outhei = 80





#Fucntions




def translate():
    global startnum, termnum, prognum, APnum, GPnum, transmsg, Errormsg
    try:
       if original.get() == translated.get(): #just a quick fix that retranslates it back to english
        Startingnum.config(text=startnum)
        Progressionnum.config(text=prognum)
        Numofterms.config(text=termnum)
        AP.config(text=APnum)
        GP.config(text=GPnum)
        trans.config(text=transmsg)
        if ans.get("1.0", "end-1c") == Errormsg:
            ans.config(state=NORMAL)
            ans.delete("1.0", tk.END)  # Clear the answer
            ans.insert(tk.END, Errormsg)
            ans.config(state=DISABLED)
        else:
            pass
       else:                                 #for every other language, this works
        #getting languges 
       #From languge 
        for key, value in languages.items():
            if (value == original.get()):
                from_languge_key =key
        #TO langauge 
        for key, value in languages.items():
            if (value == translated.get()):
                to_languge_key =key  
        
        #translating starting number
        words1 = TextBlob(startnum) #turn og text into textblob
        words1 = words1.translate(from_lang=from_languge_key , to=to_languge_key)
        
        Startingnum.config(text=words1)

        #translating progression number
        words2 = TextBlob(prognum) #turn og text into textblob
        words2 = words2.translate(from_lang=from_languge_key , to=to_languge_key)
        
        Progressionnum.config(text=words2)

        #translating number of terms
        words3 = TextBlob(termnum) #turn og text into textblob
        words3 = words3.translate(from_lang=from_languge_key , to=to_languge_key)
        Numofterms.config(text=words3)

        #translating the AP button
        words4 = TextBlob(APnum) #turn og text into textblob
        words4 = words4.translate(from_lang=from_languge_key , to=to_languge_key)
        AP.config(text=words4)

        #translating the GP button
        words5 = TextBlob(GPnum) #turn og text into textblob
        words5 = words5.translate(from_lang=from_languge_key , to=to_languge_key)
        GP.config(text=words5)



    except Exception as e:
        messagebox.showerror("Translate Error", e)

        

def clear():
    pass

def Arithmetic():
    ans.config(state=tk.NORMAL)  # Resets the state of text widget
    ans.delete(1.0, tk.END)  # Clear the previous output


    if not (StartingnumTxt.get().isdecimal() and Progressionnumtxt.get().isdecimal() and NumoftermsTxt.get().isdecimal()): #Checks whether the values are integers or not
        ans.insert(tk.END, Errormsg) #IF they aren't then it gives an error
        ans.config(state=DISABLED)
    else:                                                          #Else does the calculation
        final = 0
        tempnum = 1
        list = []
        first = int(StartingnumTxt.get())
        prog = int(Progressionnumtxt.get())
        while tempnum <= int(NumoftermsTxt.get()):
            final = first + (tempnum - 1)*prog
            tempnum += 1
            list.append(str(final))
        ans.insert(tk.END, " ".join(list)) #Adds the number to the end
        ans.config(state=tk.DISABLED)  # Make the Text widget read-only


def Geometric():
    ans.config(state=tk.NORMAL)  # Resets the state of text widget
    ans.delete(1.0, tk.END)  # Clear the previous output

    if not (StartingnumTxt.get().isdecimal() and Progressionnumtxt.get().isdecimal() and NumoftermsTxt.get().isdecimal()): #Checks whether the values are integers or not
        ans.insert(tk.END, "ERROR! TYPE INTEGERS IN ALL BOXES") #IF they aren't then it gives an error
        ans.config(state=DISABLED)
    else:                                                          #Else does the calculation




        final = 0
        tempnum = 1
        list = []
        first = int(StartingnumTxt.get())
        prog = int(Progressionnumtxt.get())
        while tempnum <= int(NumoftermsTxt.get()):
            final = first *(prog**(tempnum-1))
            tempnum += 1
            list.append(str(final))
        ans.insert(tk.END, " ".join(list)) #adds the number to the end
        ans.config(state=tk.DISABLED)  # Make the Text widget read-only



def destroy():
    root.destroy()


def calculator():
    root.title("AP and GP calculator")
    root.geometry(geo)







    global ans
    #Setting up the frame
    frame = tk.Frame(root, bg=canvascolor) #was going to use canvas but frame seemed better
    frame.pack(fill=tk.BOTH, expand=True) #fills horizontal and vertical and also expands it

    #Menu
    menubar = tk.Menu(root)
    root.config(menu=menubar)

        #Adding a file button
    file_menu = tk.Menu(menubar, tearoff=0)
    menubar.add_cascade(label='File', menu=file_menu)

    file_menu.add_command(label='Exit', command=destroy)
    
    
    #Labels
        #Starting number
    global Startingnum
    Startingnum = tk.Label(frame, text=(startnum), font=(labelfont, startnumsize), bg=labelback, fg=labeltextcol)
    Startingnum.place(x=startnumx, y=startnumy)

        #Number of Terms
    global Numofterms
    Numofterms = tk.Label(frame, text=(termnum), font=(labelfont, numOftermsize), bg=labelback, fg=labeltextcol)
    Numofterms.place(x=numOFtermx, y=numOFtermy)
    
        #Progression Number
    global Progressionnum
    Progressionnum =tk.Label(frame, text=(prognum), font=(labelfont, progressionnumsize), bg=labelback, fg=labeltextcol)
    Progressionnum.place(x=progressionnumx, y=progressionnumy)

    #Entries 

    global StartingnumTxt
    StartingnumTxt = tk.Entry(frame, font=(labelfont, startnumsize), bg=labeltextcol)
    StartingnumTxt.place(x=startnumtx, y=startnumty, width=200)

    global NumoftermsTxt
    NumoftermsTxt = tk.Entry(frame, font=(labelfont, numOftermsize), bg=labeltextcol)
    NumoftermsTxt.place(x=numofsumtx, y=numofsumty, width=300)

    global Progressionnumtxt
    Progressionnumtxt = tk.Entry(frame, font=(labelfont, progressionnumsize), bg=labeltextcol)
    Progressionnumtxt.place(x=progressionnumtx, y=progressionnumty, width=200)


    #Radiobuttons
    global AP, GP, trans
    AP = tk.Radiobutton(frame, text="Arithmetic Progression", command=Arithmetic, value=1, font=(labelfont, APsize), bg=canvascolor)
    AP.place(x=APx, y=APy)
    GP = tk.Radiobutton(frame, text="Geometric Progression", command=Geometric, value=2, font=(labelfont, GPsize), bg=canvascolor)
    GP.place(x=GPx, y=GPy)
    trans = tk.Radiobutton(frame, text="Translate", command=translate, value=3, font=(labelfont, 15), bg=canvascolor)
    trans.place(x=transx,y=transy)

    #Textbox
    original_text = Text(frame)
    translated_text = Text(frame)


    #Combo Box
    global original
    
    original = ttk.Combobox(frame, width=boxwid, value=language_list)
    original.current(21)
    
    global translated
    translated = ttk.Combobox(frame, width=boxwid, value=language_list)
    translated.current(26)
    translated.place(x=boxx,y=boxy)

    #output 

        #Frame for the output
    output = tk.Frame(frame, bg=canvascolor)
    output.place(x=outx, y=outy, width=outwid, height=outhei)
   
        #Answer label placed in the output frame
    global ans
    ans = tk.Text(output, font=(labelfont, 15), wrap=tk.NONE)#wrap basically choses what to do when the text goes over the box, in this case it is set to none as we will be using a scroll bar.
    ans.pack(side=tk.LEFT, fill=tk.BOTH, expand=True) #side command moves it all the way to the left of the output frame, fill makes sure that both horizontal and vertical axises are occupied and expand makes it useable when expanded

        #Scroll bar used in the answer
    scroll = tk.Scrollbar(output, command=ans.yview)#the scrollbar is set so that it will be vertical
    scroll.pack(side=tk.RIGHT, fill=tk.Y)#goes to the right side of the frame and fills the y axis
 
    ans.config(yscrollcommand=scroll.set, wrap=tk.WORD) #sets up the scrollbar and wraps the text with a word boundary
    
    root.mainloop()

    







if __name__ == "__main__": #checks if it is the main program
    calculator()